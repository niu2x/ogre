//-----------------------------------------------------------------------------
// Program Name: SGXLib_IntegratedPSSM
// Program Desc: Integrated PSSM functions.
// Program Type: Vertex/Pixel shader
// Language: CG
//-----------------------------------------------------------------------------

#ifdef DEBUG_PSSM
static float3 pssm_lod_info = float3(0, 0, 0);
#endif

#ifdef PSSM_SAMPLE_CMP
#define SAMPLER_TYPE Sampler2DShadow
#else
#define SAMPLER_TYPE sampler2D
#endif

//-----------------------------------------------------------------------------
void SGX_ApplyShadowFactor_Diffuse(in float4 ambient, 
					  in float4 lightSum, 
					  in float fShadowFactor, 
					  out float4 oLight)
{
	oLight.rgb = ambient.rgb + (lightSum.rgb - ambient.rgb) * fShadowFactor;
	oLight.a   = lightSum.a;
#ifdef DEBUG_PSSM
	oLight.rgb += pssm_lod_info;
#endif
}

float sampleDepth(in SAMPLER_TYPE shadowMap, float2 uv, float depth)
{
#ifdef PSSM_SAMPLE_CMP
    return tex2Dcmp(shadowMap, float3(uv, depth));
#else
	return (depth <= tex2D(shadowMap, uv).r) ? 1.0 : 0.0;
#endif
}

//-----------------------------------------------------------------------------
void SGX_ShadowPCF4(SAMPLER_TYPE shadowMap, float4 shadowMapPos, float2 offset, out float c)
{
    shadowMapPos = shadowMapPos / shadowMapPos.w;
    float2 uv = shadowMapPos.xy;
    float3 o = float3(offset, -offset.x) * 0.5f;

    // clamp depth value to near & far of current frustum
    float depth = saturate(shadowMapPos.z);

    // Note: We using 2x2 PCF. Good enough and is a lot faster.
	c =	 sampleDepth(shadowMap, uv.xy - o.xy, depth); // top left
	c += sampleDepth(shadowMap, uv.xy + o.xy, depth); // bottom right
	c += sampleDepth(shadowMap, uv.xy + o.zy, depth); // bottom left
	c += sampleDepth(shadowMap, uv.xy - o.zy, depth); // top right

    c /= 4;
}

//-----------------------------------------------------------------------------
void SGX_ComputeShadowFactor_PSSM3(in float fDepth,
                            in float4 vSplitPoints,
                            in float4 lightPosition0,
                            in SAMPLER_TYPE shadowMap0,
                            in float2 invShadowMapSize0,
                            #if PSSM_NUM_SPLITS > 2
                            in float4 lightPosition1,
                            in SAMPLER_TYPE shadowMap1,
                            in float2 invShadowMapSize1,
                            #endif
                            #if PSSM_NUM_SPLITS > 3
                            in float4 lightPosition2,
                            in SAMPLER_TYPE shadowMap2,
                            in float2 invShadowMapSize2,
                            #endif
                            in float4 lightPosition3,
                            in SAMPLER_TYPE shadowMap3,
                            in float2 invShadowMapSize3,
                            out float oShadowFactor)
{
    if (fDepth  <= vSplitPoints.x)
    {
        SGX_ShadowPCF4(shadowMap0, lightPosition0, invShadowMapSize0, oShadowFactor);
#ifdef DEBUG_PSSM
        pssm_lod_info.r = 1.0;
#endif
    }
#if PSSM_NUM_SPLITS > 2
    else if (fDepth <= vSplitPoints.y)
    {
        SGX_ShadowPCF4(shadowMap1, lightPosition1, invShadowMapSize1, oShadowFactor);
#ifdef DEBUG_PSSM
        pssm_lod_info.g = 1.0;
#endif
    }
#endif
#if PSSM_NUM_SPLITS > 3
    else if (fDepth <= vSplitPoints.z)
    {
        SGX_ShadowPCF4(shadowMap2, lightPosition2, invShadowMapSize2, oShadowFactor);
#ifdef DEBUG_PSSM
        pssm_lod_info.r = 1.0;
        pssm_lod_info.g = 1.0;
#endif
    }
#endif
    else
    {
        SGX_ShadowPCF4(shadowMap3, lightPosition3, invShadowMapSize3, oShadowFactor);
#ifdef DEBUG_PSSM
        pssm_lod_info.b = 1.0;
#endif
    }
}