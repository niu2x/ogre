// Simple PCF
// Number of samples in one dimension (square for total samples)
#define NUM_SHADOW_SAMPLES_1D 2.0
#define SHADOW_FILTER_SCALE 1
#define SHADOW_SAMPLES NUM_SHADOW_SAMPLES_1D*NUM_SHADOW_SAMPLES_1D

float4 offsetSample(float4 uv, float2 offset, float invMapSize)
{
   return float4(uv.xy + offset * invMapSize * uv.w, uv.z, uv.w);
}
float calcDepthShadow(sampler2D shadowMap, float4 uv, float invShadowMapSize)
{
   // 4-sample PCF
   float shadow = 0.0;
   float offset = (NUM_SHADOW_SAMPLES_1D/2 - 0.5) * SHADOW_FILTER_SCALE;
   for (float y = -offset; y <= offset; y += SHADOW_FILTER_SCALE)
       for (float x = -offset; x <= offset; x += SHADOW_FILTER_SCALE)
       {
           float4 newUV = offsetSample(uv, float2(x, y), invShadowMapSize);
           // manually project and assign derivatives
           // to avoid gradient issues inside loops
           newUV = newUV / newUV.w;
           float depth = tex2D(shadowMap, newUV.xy, 1, 1).x;
           if (depth >= 1 || depth >= uv.z)
               shadow += 1.0;
       }
   shadow /= SHADOW_SAMPLES;
   return shadow;
}
float calcSimpleShadow(sampler2D shadowMap, float4 shadowMapPos)
{
   return tex2Dproj(shadowMap, shadowMapPos).x;
}
float4 expand(float4 v)
{
   return v * 2 - 1;
}
